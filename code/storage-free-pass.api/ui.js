"use strict";

(function ui() {

    const inputData = prepareData();

    const generatedData = [];
    const accountIndexMap = {};

    const generatePassword = () => {
        for (let accountIndex in inputData.accounts)
            generatedData[accountIndex] = undefined;
        const index = accountIndexMap[elements.accountSelector.selectedIndex];
        passwordGenerator(
            elements.masterPassword.value,
            inputData.accounts[index].identity.seed,
            inputData.accounts[index].identity.selection.start,
            inputData.accounts[index].identity.selection.length,
            inputData.accounts[index].identity.selection.characterRepertoire,
            inputData.accounts[index].identity.selection.shift,
            inputData.accounts[index].identity.selection.inserts)
                .then(autoGeneratedPassword => {
                    generatedData[index] = autoGeneratedPassword;
                    showPassword();
                });
    }; //generatePassword

    const showPassword = (generateNew) => {
        const optionIndex =  accountIndexMap[elements.accountSelector.selectedIndex];
        if (generateNew || generatedData[optionIndex] == undefined)
            return generatePassword();        
        elements.password.element.textContent =
            elements.isButtonDown(elements.password.visibilityButton) ?
                generatedData[optionIndex]
                :
                utility.hiddenString(generatedData[optionIndex].length);
        elements.optimizeWidths(false);
    }; //showPassword

    const populate = () => {
        let groupCount = 0;
        const noGroupAccounts = [];
        const groupAccounts = {};
        const addAccountDescriptor = accountIndex => {
            const account = inputData.accounts[accountIndex];
            const descriptor = { index: accountIndex, account: account };
            if (account.display.group) {
                let array = groupAccounts[account.display.group];
                if (!array) {
                    array = groupAccounts[account.display.group] = [];
                    const element = document.createElement("optgroup");
                    element.label = account.display.group;
                    descriptor.group = element;
                    ++groupCount;
                } //if
                array.push(descriptor);
            } else
                noGroupAccounts.push(descriptor);
        }; //addAccountDescriptor
        for (let accountIndex in inputData.accounts)
            addAccountDescriptor(accountIndex);
        let currentSelectionIndex = 0;
        for (let account of noGroupAccounts) {
            const option = document.createElement("option");
            option.textContent = account.account.display.name;
            elements.accountSelector.appendChild(option);
            accountIndexMap[currentSelectionIndex++] = account.index; 
        }
        for (let index in groupAccounts) {
            const groupContainer = groupAccounts[index];
            let optionGroupElement;
            if (groupContainer.length > 0) {
                optionGroupElement = groupContainer[0].group;
                elements.accountSelector.appendChild(optionGroupElement);
            } //if
            for (let account of groupContainer) {
                const option = document.createElement("option");
                option.textContent = account.account.display.name;
                optionGroupElement.appendChild(option);
                accountIndexMap[currentSelectionIndex++] = account.index;
            } 
        }
        elements.masterPassword.value = String.empty;
        { // optimize sizes:
            const itemLength = inputData.accounts.length + groupCount; 
            if (elements.accountSelector.size > itemLength)
                elements.accountSelector.size = itemLength;
            elements.optimizeWidths(true);
        }
        { //populate metadata:
            if (!inputData.metadata.title) return;
            const accountSetInfo = inputData.metadata.version ? 
                `${inputData.metadata.title}${String.fromCodePoint(0x2003)}v.${String.fromCodePoint(0x2009)}${inputData.metadata.version}`
                :
                inputData.metadata.title;
            elements.accountSelector.title += `\n\nAccount set:${String.fromCodePoint(0x2003)}${accountSetInfo}`;
        }
    }; //populate

    const refresh = accountIndex => {
        showPassword();
        const value = inputData.accounts[accountIndex];
        if (value.display.url)
            elements.url.innerHTML = `<a href="${value.display.url}">${value.display.name}</a>`;
        else
            elements.url.innerHTML = `<b>${value.display.name}</b>`;
        elements.userInfo.name.textContent = elements.isButtonDown(elements.userInfo.visibilityButton) ?
            value.display.user.name : value.display.hiddenUserAuthenticationName;
        elements.seed.textContent = value.identity.seed;
        elements.positions.textContent = `${value.identity.selection.start} ${value.identity.selection.length} ${value.identity.selection.shift}`;
        if (value.display.user.url)
            elements.userInfo.url.setAttribute("href", value.display.user.url);
        else
            elements.userInfo.url.removeAttribute("href");
    }; //refresh

    function prepareData() {
        var data = userData();
        for (let account of data.accounts) {
            utility.populateUndefined(account, data.default);
            account.display.hiddenUserAuthenticationName = utility.hiddenString(account.display.user.name.length);
        } //loop
        return utility.createReadonly(data);
    } //prepareData
   
    //////// main:

    window.onload = () => {
        elements.populate(inputData, refresh, accountIndexMap);
        elements.password.clipboardButton.onclick = ev => {
            elements.setClipboardWarning(true);
            utility.clipboard.copy(generatedData[accountIndexMap[elements.accountSelector.selectedIndex]]);
        };
        elements.userInfo.clipboardButton.onclick = ev => {
            elements.setClipboardWarning(true);
            utility.clipboard.copy(inputData.accounts[accountIndexMap[elements.accountSelector.selectedIndex]].display.user.name);
        };
        elements.password.visibilityButton.addEventListener("click", ev => {
            showPassword();
        }); //elements.password.visibilityButton on click        
        populate();
        elements.masterPassword.oninput = () => { showPassword(true /*generate new*/); };
        elements.accountSelector.onchange = ev => {
            refresh(accountIndexMap[ev.target.selectedIndex]);
        };
        if (elements.accountSelector.childElementCount > 0) {
            elements.accountSelector.selectedIndex = 0;
            refresh(0);
        } //if
    }; //main

})();
